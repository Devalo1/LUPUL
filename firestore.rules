rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security rules
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && 
             (
               // Direct access for main admin account
               request.auth.token.email == "dani_popa21@yahoo.ro" ||
               // Or check for admin claim in the token
               request.auth.token.admin == true
             );
    }
    
    function isOwnDocument() {
      return request.auth.uid == resource.data.uid || 
             request.auth.uid == resource.id;
    }
    
    // User documents access rules
    match /users/{userId} {
      // Anyone authenticated can read their own document and basic metadata of other users
      allow read: if isAuthenticated();
      // Allow a user to modify their own document
      allow write: if isAuthenticated() && request.auth.uid == userId;
      // Admins can modify any document
      allow write: if isAdmin();
    }
    
    // Public collections - anyone can read, only admins can write
    match /categories/{category} {
      allow read: if true; // Categories are always readable by anyone
      allow write: if isAdmin();
    }
    
    match /products/{product} {
      allow read: if true; // Products are public
      allow write: if isAdmin();
    }
    
    match /articles/{article} {
      allow read: if true; // Articles are public
      allow write: if isAdmin();
    }
    
    match /events/{event} {
      allow read: if true; // Events are public
      allow write: if isAdmin();
    }
    
    match /orders/{order} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    match /eventRegistrations/{registration} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
    }
    
    // Firestore rules for calendarAttachments (varianta A)
    match /calendarAttachments/{dateId} {
      allow read, write: if request.auth != null;
    }

    // Allow authenticated users to access accounting collections
    match /zReports/{zReportId} {
      allow read, write: if isAuthenticated();
    }
    match /settlements/{settlementId} {
      allow read, write: if isAuthenticated();
    }
    match /invoices/{invoiceId} {
      allow read, write: if isAuthenticated();
    }
    match /stockMovements/{movementId} {
      allow read, write: if isAuthenticated();
    }
    match /stocks/{stockId} {
      allow read, write: if isAuthenticated();
    }

    // Card Reports - rapoarte zilnice de plăți cu cardul
    match /cardReports/{cardReportId} {
      allow read, write: if true;
    }

    // Default rule - deny access unless specific rule allows it
    match /{document=**} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
  }
}