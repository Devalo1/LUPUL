rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security rules
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return request.auth != null && 
             (
               // Direct access for main admin account
               request.auth.token.email == "dani_popa21@yahoo.ro" ||
               // Or check for admin claim in the token
               request.auth.token.admin == true ||
               // Or check if user has admin role in users collection
               exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
             );
    }
    
    function isOwnDocument() {
      return request.auth.uid == resource.data.uid || 
             request.auth.uid == resource.id;
    }
    
    // User documents access rules
    match /users/{userId} {
      // Anyone authenticated can read their own document and basic metadata of other users
      allow read: if isAuthenticated();
      // Allow a user to modify their own document
      allow write: if isAuthenticated() && request.auth.uid == userId;
      // Admins can modify any document
      allow write: if isAdmin();
    }
    
    // Public collections - anyone can read, only admins can write
    match /categories/{category} {
      allow read: if true; // Categories are always readable by anyone
      allow write: if isAdmin();
    }
    
    match /products/{product} {
      allow read: if true; // Products are public
      allow write: if isAdmin();
    }
    
    match /articles/{article} {
      allow read: if true; // Articles are public
      allow write: if isAdmin();
    }
    
    match /events/{event} {
      allow read: if true; // Events are public
      allow write: if isAdmin();
    }
    
    match /orders/{order} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    match /eventRegistrations/{registration} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
    }
    
    // Firestore rules for calendarAttachments (varianta A)
    match /calendarAttachments/{dateId} {
      allow read, write: if request.auth != null;
    }

    // Allow authenticated users to access accounting collections
    match /zReports/{zReportId} {
      allow read, write: if isAuthenticated();
    }
    match /settlements/{settlementId} {
      allow read, write: if isAuthenticated();
    }
    match /invoices/{invoiceId} {
      allow read, write: if isAuthenticated();
    }
    match /stockMovements/{movementId} {
      allow read, write: if isAuthenticated();
    }    match /stocks/{stockId} {
      allow read, write: if isAuthenticated();
    }

    // Card Reports - rapoarte zilnice de plăți cu cardul
    match /cardReports/{cardReportId} {
      allow read, write: if true;
    }

    // Therapy Conversations - conversațiile de terapie ale utilizatorilor
    match /therapyConversations/{conversationId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // User AI Profiles - profilurile AI personalizate ale utilizatorilor
    match /userAIProfiles/{profileId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // AI Settings and Configuration - setările AI pentru utilizatori
    match /aiSettings/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }

    // Specialists collection access
    match /specialists/{specialistId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAdmin());
    }

    // Services collection - serviciile disponibile pentru programări
    match /services/{serviceId} {
      allow read: if true; // Services are public
      allow write: if isAdmin();
    }

    // Specialist Services - serviciile specifice ale specialiștilor
    match /specialistServices/{serviceId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (request.auth.uid == resource.data.specialistId || isAdmin());
    }

    // Appointments - programările utilizatorilor
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.specialistId || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.specialistId || isAdmin());
      allow delete: if isAdmin();
    }    // AI Assistant Conversations - Messenger widget
    match /conversations/{conversationId} {
      // Allow authenticated users to read their own conversations
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Allow authenticated users to create a conversation for themselves
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      // Allow authenticated users to update/delete their own conversations
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Admins can do anything
      allow read, write: if isAdmin();
    }

    // User Personality Profiles - profilurile de personalizare AI bazate pe analiza conversațiilor
    match /userPersonalityProfiles/{userId} {
      // Only the user can read and write their own personality profile
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      // Admins can access any profile for debugging/support
      allow read, write: if isAdmin();
    }

    // Role Change Requests - requests to change user roles
    match /roleChangeRequests/{requestId} {
      // Users can read their own requests
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Users can create their own requests
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Only admins can approve/deny requests
      allow update, delete: if isAdmin();
      // Admins can read all requests
      allow read: if isAdmin();
    }

    // Special Sessions - sesiuni speciale create de specialiști
    match /specialSessions/{sessionId} {
      // Specialiștii pot crea, citi și modifica propriile sesiuni
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.specialistId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.specialistId == request.auth.uid;
      // Admins pot face orice
      allow read, write: if isAdmin();
    }

    // Specialization Change Requests - cereri de schimbare a specializării
    match /specializationChangeRequests/{requestId} {
      // Specialiștii pot crea cereri pentru ei înșiși
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Specialiștii pot citi propriile cereri
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Doar adminii pot aproba/respinge cereri
      allow update, delete: if isAdmin();
      // Adminii pot citi toate cererile
      allow read: if isAdmin();
    }

    // Admin emails collection - for managing admin permissions
    match /admin_emails/{emailId} {
      // Only admins can read and write
      allow read, write: if isAdmin();
    }

    // Admins collection - for admin management
    match /admins/{adminId} {
      // Allow authenticated users to read (for admin detection)
      allow read: if isAuthenticated();
      // Only admins can write
      allow write: if isAdmin();
    }

    // Medical System Collections
    match /medicines/{medicineId} {
      // Anyone can read medicine information
      allow read: if true;
      // Only admins can manage medicines
      allow write: if isAdmin();
    }
    
    match /drugInteractions/{interactionId} {
      // Anyone can read drug interaction information
      allow read: if true;
      // Only admins can manage interactions
      allow write: if isAdmin();
    }
    
    match /aiKnowledgeBase/{knowledgeId} {
      // Anyone can read AI knowledge base
      allow read: if true;
      // Only admins can manage knowledge base
      allow write: if isAdmin();
    }

    // Reading Sessions - for tracking user reading behavior
    match /readingSessions/{sessionId} {
      // Users can read their own sessions, admins can read all
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Users can create their own sessions
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      // Users can update their own sessions, admins can update all
      allow update: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Only admins can delete sessions
      allow delete: if isAdmin();
    }

    // Emblem Collections - for checking available emblem stocks
    match /emblemCollections/{emblemType} {
      // Anyone can read emblem availability
      allow read: if true;
      // Only admins can update stock
      allow write: if isAdmin();
    }
    
    // Emblems - main emblem collection for user emblems
    match /emblems/{emblemId} {
      // Users can read their own emblems, admins can read all
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Only system can create emblems (through functions)
      allow create: if true;
      // Only admins can update/delete
      allow update, delete: if isAdmin();
    }
    
    // Emblem Stocks - new emblem stock management
    match /emblem_stocks/{stockId} {
      // Anyone can read emblem stock
      allow read: if true;
      // Only admins can update stock
      allow write: if isAdmin();
    }
    
    // Emblem Stock Logs - for tracking stock changes
    match /emblem_stock_logs/{logId} {
      // Anyone can read stock logs
      allow read: if true;
      // Only admins can create logs
      allow write: if isAdmin();
    }
    
    // User Emblems - emblems owned by users
    match /userEmblems/{emblemId} {
      // Users can read their own emblems, admins can read all
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Only system can create emblems (through functions)
      allow create: if true;
      // Only admins can update/delete
      allow update, delete: if isAdmin();
    }
    
    // Emblem Orders - orders for purchasing emblems
    match /emblemOrders/{orderId} {
      // Users can read their own orders, admins can read all
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      // Users can create their own orders
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      // Only admins can update/delete orders
      allow update, delete: if isAdmin();
    }

    // Default rule - deny access unless specific rule allows it
    match /{document=**} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
  }
}