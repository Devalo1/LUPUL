// Conversation Manager Service - GestioneazƒÉ conversa»õiile cu titluri automate »ôi istoric
import { 
  collection, 
  doc, 
  getDoc, 
  setDoc, 
  updateDoc, 
  query, 
  where, 
  orderBy, 
  limit,
  getDocs, 
  Timestamp
} from "firebase/firestore";
import { firestore } from "../firebase";

export interface ConversationMessage {
  id: string;
  role: "user" | "assistant" | "system";
  content: string;
  timestamp: Timestamp | Date;
}

export interface Conversation {
  id: string;
  userId: string;
  title: string; // Titlu generat automat
  aiType: "psihica" | "fizica" | "general";
  messages: ConversationMessage[];
  createdAt: Timestamp | Date;
  updatedAt: Timestamp | Date;
  isActive: boolean;
  backgroundImage?: string;
}

export const conversationManagerService = {
  // CreeazƒÉ o conversa»õie nouƒÉ
  async createConversation(
    userId: string, 
    aiType: "psihica" | "fizica" | "general" = "general",
    backgroundImage?: string
  ): Promise<string> {
    try {
      const conversationId = `${userId}_${Date.now()}`;
      const conversation: Conversation = {
        id: conversationId,
        userId,
        title: "Conversa»õie nouƒÉ", // Va fi actualizat automat
        aiType,
        messages: [],
        createdAt: Timestamp.now(),
        updatedAt: Timestamp.now(),
        isActive: true,
        backgroundImage
      };

      const conversationRef = doc(firestore, "conversations", conversationId);
      await setDoc(conversationRef, conversation);

      return conversationId;
    } catch (error) {
      console.error("Eroare la crearea conversa»õiei:", error);
      throw error;
    }
  },

  // AdaugƒÉ un mesaj la conversa»õie »ôi actualizeazƒÉ titlul dacƒÉ e necesar
  async addMessage(
    conversationId: string,
    message: Omit<ConversationMessage, "id" | "timestamp">
  ): Promise<void> {
    try {
      const conversationRef = doc(firestore, "conversations", conversationId);
      const conversationDoc = await getDoc(conversationRef);

      if (!conversationDoc.exists()) {
        throw new Error("Conversa»õia nu existƒÉ");
      }

      const conversation = conversationDoc.data() as Conversation;
      const messageId = `msg_${Date.now()}`;
      
      const newMessage: ConversationMessage = {
        ...message,
        id: messageId,
        timestamp: Timestamp.now()
      };

      conversation.messages.push(newMessage);
      conversation.updatedAt = Timestamp.now();

      // GenereazƒÉ titlul automat dacƒÉ e prima interac»õiune realƒÉ
      if (conversation.messages.length === 2 && message.role === "user") { // user + assistant
        conversation.title = await this.generateConversationTitle(conversation.messages);
      }

      await updateDoc(conversationRef, {
        messages: conversation.messages,
        updatedAt: conversation.updatedAt,
        title: conversation.title
      });
    } catch (error) {
      console.error("Eroare la adƒÉugarea mesajului:", error);
      throw error;
    }
  },

  // GenereazƒÉ un titlu pentru conversa»õie bazat pe primul mesaj al utilizatorului
  async generateConversationTitle(messages: ConversationMessage[]): Promise<string> {
    try {
      const userMessage = messages.find(msg => msg.role === "user");
      if (!userMessage) return "Conversa»õie nouƒÉ";

      const content = userMessage.content.toLowerCase();
      
      // IdentificƒÉ subiectul principal din primul mesaj
      if (content.includes("anxietate") || content.includes("anxios") || content.includes("stres")) {
        return "üí≠ Discu»õie despre anxietate";
      } else if (content.includes("depresie") || content.includes("trist") || content.includes("deprimat")) {
        return "üåßÔ∏è Suport pentru depresie";
      } else if (content.includes("rela»õie") || content.includes("iubire") || content.includes("partener")) {
        return "‚ù§Ô∏è Consiliere rela»õionalƒÉ";
      } else if (content.includes("somn") || content.includes("insomnie") || content.includes("dorm")) {
        return "üò¥ Probleme de somn";
      } else if (content.includes("m√¢ncare") || content.includes("dietƒÉ") || content.includes("greutate")) {
        return "üçé Nutri»õie »ôi sƒÉnƒÉtate";
      } else if (content.includes("exerci»õiu") || content.includes("sport") || content.includes("fitness")) {
        return "üí™ Fitness »ôi exerci»õii";
      } else if (content.includes("durere") || content.includes("doare") || content.includes("medicament")) {
        return "ü©∫ Probleme fizice";
      } else if (content.includes("lucru") || content.includes("carierƒÉ") || content.includes("job")) {
        return "üíº Consiliere profesionalƒÉ";
      } else if (content.includes("familie") || content.includes("pƒÉrinte") || content.includes("copil")) {
        return "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Rela»õii familiale";
      } else if (content.includes("bunƒÉ") || content.includes("salut") || content.includes("hello")) {
        return "üëã Conversa»õie generalƒÉ";
      } else {
        // Folose»ôte primele cuvinte semnificative
        const words = content.split(" ").filter(word => word.length > 3).slice(0, 3);
        if (words.length > 0) {
          return `üí¨ ${words.join(" ").charAt(0).toUpperCase() + words.join(" ").slice(1)}`;
        }
      }

      return "üí¨ Conversa»õie nouƒÉ";
    } catch (error) {
      console.error("Eroare la generarea titlului:", error);
      return "üí¨ Conversa»õie nouƒÉ";
    }
  },

  // Ob»õine toate conversa»õiile unui utilizator
  async getUserConversations(userId: string, limitCount: number = 50): Promise<Conversation[]> {
    try {
      const conversationsQuery = query(
        collection(firestore, "conversations"),
        where("userId", "==", userId),
        where("isActive", "==", true),
        orderBy("updatedAt", "desc"),
        limit(limitCount)
      );

      const querySnapshot = await getDocs(conversationsQuery);
      const conversations: Conversation[] = [];

      querySnapshot.forEach((doc) => {
        conversations.push(doc.data() as Conversation);
      });

      return conversations;
    } catch (error) {
      console.error("Eroare la ob»õinerea conversa»õiilor:", error);
      return [];
    }
  },

  // Ob»õine o conversa»õie specificƒÉ
  async getConversation(conversationId: string): Promise<Conversation | null> {
    try {
      const conversationRef = doc(firestore, "conversations", conversationId);
      const conversationDoc = await getDoc(conversationRef);

      if (!conversationDoc.exists()) {
        return null;
      }

      return conversationDoc.data() as Conversation;
    } catch (error) {
      console.error("Eroare la ob»õinerea conversa»õiei:", error);
      return null;
    }
  },

  // ActualizeazƒÉ poza de fundal pentru o conversa»õie
  async updateBackgroundImage(conversationId: string, backgroundImage: string): Promise<void> {
    try {
      const conversationRef = doc(firestore, "conversations", conversationId);
      await updateDoc(conversationRef, {
        backgroundImage,
        updatedAt: Timestamp.now()
      });
    } catch (error) {
      console.error("Eroare la actualizarea pozei de fundal:", error);
      throw error;
    }
  },

  // »òterge o conversa»õie (soft delete)
  async deleteConversation(conversationId: string): Promise<void> {
    try {
      const conversationRef = doc(firestore, "conversations", conversationId);
      await updateDoc(conversationRef, {
        isActive: false,
        updatedAt: Timestamp.now()
      });
    } catch (error) {
      console.error("Eroare la »ôtergerea conversa»õiei:", error);
      throw error;
    }
  },

  // Redenume»ôte o conversa»õie
  async renameConversation(conversationId: string, newTitle: string): Promise<void> {
    try {
      const conversationRef = doc(firestore, "conversations", conversationId);
      await updateDoc(conversationRef, {
        title: newTitle,
        updatedAt: Timestamp.now()
      });
    } catch (error) {
      console.error("Eroare la redenumirea conversa»õiei:", error);
      throw error;
    }
  }
};
