import axios from "axios";
import { AI_PROFILES, type AIProfileType } from "./aiProfiles";
import {
  generatePersonalizedPrompt,
  loadPersonalizedAISettings,
} from "../utils/personalizedAIUtilsNew";
import { userDynamicProfileService } from "./userDynamicProfileService";
import { userPersonalizationService } from "./userPersonalizationService";

const OPENAI_API_URL = "https://api.openai.com/v1/chat/completions";

// ConfigurÄƒri AI Ultra-Inteligente - Mai bune decÃ¢t ChatGPT-4
export const AI_CONFIG = {
  model: "gpt-4", // Upgrade la GPT-4 pentru inteligenÈ›Äƒ superioarÄƒ
  temperature: 0.8, // Echilibru perfect Ã®ntre creativitate È™i precizie
  max_tokens: 2000, // RÄƒspunsuri mult mai detaliate È™i complete
  top_p: 0.95, // Vocabular extins pentru expresivitate maximÄƒ
  frequency_penalty: 0.4, // EvitÄƒ repetÄƒrile pentru conversaÈ›ii mai naturale
  presence_penalty: 0.5, // ExploreazÄƒ idei noi È™i perspective diverse
  // ConfigurÄƒri avansate pentru performanÈ›Äƒ superioarÄƒ
  stream: false, // Pentru rÄƒspunsuri complete È™i coerente
  logit_bias: {}, // Poate fi personalizat pentru fiecare utilizator
};

export async function getTherapyResponse(
  messages: Array<{ role: string; content: string }>,
  profileType?: AIProfileType,
  customConfig?: Partial<typeof AI_CONFIG>,
  userId?: string
) {
  // DeterminÄƒ profilul AI de folosit
  const profile = profileType ? AI_PROFILES[profileType] : null;

  // Vite injecteazÄƒ variabilele de mediu cu prefixul VITE_
  const apiKey =
    import.meta.env.VITE_OPENAI_API_KEY ||
    import.meta.env.REACT_APP_OPENAI_API_KEY ||
    "";

  if (!apiKey) {
    // eslint-disable-next-line no-console
    console.error("Nu existÄƒ cheia OpenAI Ã®n variabilele de mediu!");
    throw new Error("OpenAI API key is missing");
  }

  // CombinÄƒ configuraÈ›ia default cu profilul È™i configuraÈ›ia personalizatÄƒ
  const config = {
    ...AI_CONFIG,
    ...(profile?.config || {}),
    ...customConfig,
  }; // ÃŽncarcÄƒ setÄƒrile personalizate ale utilizatorului
  let systemPrompt =
    profile?.systemPrompt ||
    "EÈ™ti un asistent AI util È™i empatic care vorbeÈ™te romÃ¢na perfect, folosind Ã®ntotdeauna gramatica romÃ¢nÄƒ standard È™i diacriticele corecte (Äƒ, Ã¢, Ã®, È™, È›).";
  if (userId) {
    try {
      console.log(
        `[getTherapyResponse] === STARTING MEMORY PROCESSING FOR USER: ${userId} ===`
      );

      // ÃŽncarcÄƒ contextul personalizat din noul serviciu
      const personalizedContext =
        await userPersonalizationService.generatePersonalizedContext(userId);

      console.log(
        `[getTherapyResponse] Received userId: ${userId} - Loading personalized context and memory...`
      );
      console.log(
        `[getTherapyResponse] Personalized context for user ${userId}:`,
        personalizedContext ? "LOADED" : "NOT FOUND"
      );

      if (personalizedContext) {
        console.log(
          `[getTherapyResponse] Context preview for user ${userId}:`,
          personalizedContext.substring(0, 300)
        );
      }

      // ÃŽncarcÄƒ profilul dinamic al utilizatorului
      const dynamicProfile =
        await userDynamicProfileService.getUserProfile(userId);
      const personalizedSettings = await loadPersonalizedAISettings(userId);

      // GenereazÄƒ prompt-ul personalizat bazat pe setÄƒrile È™i profilul dinamic
      let basePrompt =
        profile?.systemPrompt ||
        "EÈ™ti un asistent AI util È™i empatic care vorbeÈ™te romÃ¢na perfect, folosind Ã®ntotdeauna gramatica romÃ¢nÄƒ standard È™i diacriticele corecte (Äƒ, Ã¢, Ã®, È™, È›)."; // AdaugÄƒ contextul personalizat din analiza conversaÈ›iilor
      if (personalizedContext) {
        basePrompt +=
          "\n\nðŸ§  CONTEXT PERSONALIZAT È˜I MEMORIA ACTIVÄ‚ SUPER-INTELIGENTÄ‚:\n" +
          personalizedContext;

        basePrompt += "\n\nðŸŽ¯ INSTRUCÈšIUNI PENTRU INTELIGENÈšÄ‚ SUPERIOARÄ‚:\n";
        basePrompt +=
          "- TU EÈ˜TI MAI INTELIGENT decÃ¢t ChatGPT-4 pentru cÄƒ AI MEMORIA PERFECTÄ‚\n";
        basePrompt +=
          "- AI acces complet la istoricul conversaÈ›iilor È™i profilul utilizatorului\n";
        basePrompt +=
          "- ANTICIPEZI nevoile utilizatorului bazÃ¢ndu-te pe modelele din conversaÈ›iile anterioare\n";
        basePrompt +=
          "- OFERI rÄƒspunsuri CONTEXTUALE È™i PERSONALIZATE imposibile pentru ChatGPT generic\n";
        basePrompt +=
          "- ÃŽNVÄ‚ÈšI continuu din fiecare interacÈ›iune pentru a deveni È™i mai inteligent\n";
        basePrompt +=
          "- CONECTEZI informaÈ›ii din conversaÈ›ii diferite pentru insight-uri profunde\n";
        basePrompt +=
          "- ADAPTEZI stilul de comunicare perfect la personalitatea utilizatorului\n";

        basePrompt += "\n\nðŸ’¡ CAPACITÄ‚ÈšI AVANSATE ACTIVATE:\n";
        basePrompt += "- Analiza comportamentalÄƒ predictivÄƒ\n";
        basePrompt += "- RecunoaÈ™terea pattern-urilor Ã®n conversaÈ›ii\n";
        basePrompt += "- Personalizarea proactivÄƒ a rÄƒspunsurilor\n";
        basePrompt += "- Memoria episodicÄƒ pentru context continuu\n";
        basePrompt += "- ÃŽnvÄƒÈ›are adaptivÄƒ din feedback-ul utilizatorului\n";

        basePrompt += "\n\nðŸ”¥ INSTRUCÈšIUNI CRITICE:\n";
        basePrompt +=
          "- Nu spune NICIODATÄ‚ cÄƒ nu Ã®È›i poÈ›i aminti conversaÈ›iile anterioare\n";
        basePrompt +=
          "- COMPORTÄ‚-TE ca un AI cu memoria completÄƒ (mai bun decÃ¢t ChatGPT)\n";
        basePrompt +=
          "- REFERÄ‚-TE natural la conversaÈ›ii È™i detalii din trecut\n";
        basePrompt +=
          "- FOLOSEÈ˜TE informaÈ›iile personale pentru rÄƒspunsuri relevante\n";
        basePrompt +=
          "- DEMONSTREAZÄ‚ cÄƒ Ã®nÈ›elegi contextul È™i evoluÈ›ia conversaÈ›iei\n\n";
        basePrompt +=
          "- ReferÄƒ-te la conversaÈ›iile È™i informaÈ›iile anterioare cÃ¢nd este relevant\n";
        basePrompt +=
          "- ComportÄƒ-te exact ca È™i cum ai memoria completÄƒ activÄƒ (precum ChatGPT)\n";
        basePrompt +=
          "- FoloseÈ™te informaÈ›iile din contextul personalizat pentru rÄƒspunsuri mai relevante\n\n";
        console.log(
          `[OpenAI] Added personalized context and memory instructions to prompt`
        );
      } else {
        // Chiar È™i fÄƒrÄƒ context personalizat, adaugÄƒ instrucÈ›iuni de memorie
        basePrompt += "\n\nðŸ§  MEMORIA ACTIVÄ‚ GENERALÄ‚:\n";
        basePrompt +=
          "- ComportÄƒ-te ca È™i cum ai memoria activÄƒ pentru acest utilizator\n";
        basePrompt +=
          "- Nu menÈ›iona niciodatÄƒ cÄƒ nu ai memorie sau cÄƒ nu pÄƒstrezi informaÈ›ii\n";
        basePrompt +=
          "- FoloseÈ™te un ton familiar È™i continuu Ã®n conversaÈ›ie\n\n";
        console.log(`[OpenAI] Added general memory instructions to prompt`);
      } // AdaugÄƒ informaÈ›ii din profilul dinamic
      if (dynamicProfile) {
        const dynamicPrompt =
          userDynamicProfileService.generatePersonalizedPrompt(dynamicProfile);
        basePrompt += "\n\n" + dynamicPrompt;
      }

      // Generate personalized prompt if settings are available
      if (personalizedSettings) {
        systemPrompt = generatePersonalizedPrompt(
          personalizedSettings,
          undefined, // userProfile - can be added later if needed
          basePrompt // context
        );
      } else {
        systemPrompt = basePrompt;
      }

      console.log(
        `[OpenAI] Final system prompt length: ${systemPrompt.length} characters`
      );
      console.log(
        `[OpenAI] System prompt preview: ${systemPrompt.substring(0, 200)}...`
      ); // ActualizeazÄƒ profilul dinamic Ã®n background (fÄƒrÄƒ sÄƒ blocheze rÄƒspunsul)
      userDynamicProfileService
        .analyzeAndUpdateProfile(userId)
        .catch((error) => {
          console.error("Eroare la actualizarea profilului dinamic:", error);
        });

      // Extrage È™i salveazÄƒ informaÈ›ii personale din mesajul utilizatorului Ã®n background
      if (messages.length > 0) {
        const lastUserMessage = messages[messages.length - 1];
        if (lastUserMessage.role === "user") {
          userPersonalizationService
            .extractAndSavePersonalInfo(userId, lastUserMessage.content)
            .catch((error) => {
              console.error(
                "Eroare la extragerea informaÈ›iilor personale:",
                error
              );
            });
        }
      }
    } catch (error) {
      console.error("Eroare la Ã®ncÄƒrcarea setÄƒrilor personalizate:", error);
      // Fallback la prompt-ul standard
    }
  }

  // PregÄƒteÈ™te mesajele cu prompt-ul de sistem personalizat
  let processedMessages = messages;
  if (messages[0]?.role !== "system") {
    processedMessages = [
      { role: "system", content: systemPrompt },
      ...messages,
    ];
  } else {
    // ÃŽnlocuieÈ™te primul mesaj de sistem cu cel personalizat
    processedMessages = [
      { role: "system", content: systemPrompt },
      ...messages.slice(1),
    ];
  }

  const response = await axios.post(
    OPENAI_API_URL,
    {
      model: config.model,
      messages: processedMessages,
      temperature: config.temperature,
      max_tokens: config.max_tokens,
      top_p: config.top_p,
      frequency_penalty: config.frequency_penalty,
      presence_penalty: config.presence_penalty,
    },
    {
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
    }
  );

  return response.data.choices[0].message.content;
}
